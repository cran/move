#importFrom(graphics, "plot")
import(sp)
import(methods)
import(geosphere)
import(raster)
import(rgdal)
importFrom("stats", "as.dist")
importFrom("utils", "combn")
importFrom(httr, GET)
importFrom(httr, HEAD)
importFrom(httr, add_headers)
importFrom(httr, parse_url)
importFrom(httr, modify_url)
importFrom(httr, write_disk)
importFrom(httr, content)
importFrom(stats, sd)
importFrom(stats, var)
importFrom(stats, optim)
importFrom(stats, optimize)
importFrom(utils, read.csv)
importFrom(utils, unzip)
importFrom(utils, capture.output)
importFrom(graphics, par)
importFrom(graphics, abline)
importFrom(graphics, segments)
importFrom(grDevices, rgb)
importFrom(parallel, parLapply)
importFrom(xml2,xml_find_all)
importFrom(xml2,xml_contents)
importFrom(xml2,xml_attr)
importFrom(memoise,memoise)

importFrom(Rcpp,sourceCpp) # to statify check
exportClasses(
	DBBMM,
	DBBMMStack,
	Move,
	MovebankLogin,
	MoveStack,
	.UD,
	.UDStack,
	.MoveTrack,
	.MoveTrackSingle,
	.MoveTrackSingleBurst,
	.MoveGeneral,
	dBMvarianceTmp,
	dBGBvariance,
	dBGBvarianceTmp,
	dynBGB, 
	MoveBurst,
	.unUsedRecords,
	.unUsedRecordsStack
)
exportMethods(
	angle,
	getDataRepositoryData,
	brownian.bridge.dyn,
	burst,
emd,
	burstId,
	"burstId<-",
	citations,
	"citations<-",
	contour,
	corridor,
	turnAngleGc,
	distance,
	equalProj,
	getDuplicatedTimestamps,
	getMovebank,
	getMovebankAnimals,
	getMovebankData,
	getMovebankID,
	getMovebankNonLocationData,
	getMovebankSensors,
	getMovebankSensorsAttributes,
	getMovebankStudies,
	getMovebankStudy,
	getMotionVariance,
	getVolumeUD,
	hrBootstrap,
	lines,
  licenseTerms,
  "licenseTerms<-",
	move,
	move2ade,
	movebankLogin, 
	moveStack,
	n.indiv,
	n.locs,
	outerProbability,
	plot,
	plotBursts,
	points,
	raster2contour,
	seglength,
	show,
	sensor,
	speed,
	split,
	summary,
  thinTrackTime,
  thinDistanceAlongTrack,
	searchMovebankStudies,
	timeLag,
	trackId,
	brownian.motion.variance.dyn,
	timestamps,
	"timestamps<-",
	burst,
	split,
	"unUsedRecords<-",
	unUsedRecords,
	idData,
	UDStack,
	'idData<-',
  "dynBGB",
  "dynBGBvariance",
	interpolateTime
)
useDynLib(move, .registration=T)


           
